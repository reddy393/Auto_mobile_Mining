# -*- coding: utf-8 -*-
"""Minor project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IxTdGqR0cMA913ClDPnJ2B_5_sPS8RSZ

# Project Information

It is a minor Analytics project for beginners to understand how to explore data to get some insights using python

- Library used - Pandas

- Data - https://raw.githubusercontent.com/arora123/Data/master/Automobile_data.csv

- Data Description - All column names are self explanatory

- Objectives -

Import automobile data set using Python Pandas to answer the following questions.

A. Is there any missing values in the data? If yes, drop the rows with missing values.

B. And answer the following question.
1. which are the cars with minimum or maximum price?
2. How many cars are there with different body-styles?
3. What is the average price of all body types of cars? Arrange them in descending order
4. What is the average price of cars by different companies? Arrange them in descending order
5. Count car types have diffeent number cylinders?

You can also use data visualization to explore the data.


Solution: Colab Notebook uploaded

Exploratory data analysis - Visualization / matplotlib

1. Company & price
2. Company & no of cylinders
3. Body type & price
4. Body type & cylinders
5. engine type & horse power
"""

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/arora123/Data/master/Automobile_data.csv")
print(df)

#A. Is there any missing values in the data? If yes, drop the rows with missing values.
# Check for missing values
missing_values = df.isnull().sum()
print("Missing values:\n",missing_values)
# Drop rows with missing values
df.dropna(inplace=True)
# Display the DataFrame shape after dropping missing values
print("Shape of DataFrame after dropping missing values:", df.shape)

#1.which are the cars with minimum or maximum price?
# Car with minimum price
min_price_car = df.loc[df['price'].idxmin()]
# Car with maximum price
max_price_car = df.loc[df['price'].idxmax()]
print("Car with minimum price:")
print(min_price_car)
print("\nCar with maximum price:")
print(max_price_car)

#2.How many cars are there with different body-styles?
# Count cars with different body styles
body_style_count = df['body-style'].value_counts()
print("Number of cars with different body styles:")
print(body_style_count)

#3.What is the average price of all body types of cars? Arrange them in descending order
# Calculate average price of cars for each body type and arrange in descending order
avg_price_body_style = df.groupby('body-style')['price'].mean().sort_values(ascending=False)
print("Average price of cars for each body type (Descending order):")
print(avg_price_body_style)

#4.What is the average price of cars by different companies? Arrange them in descending order
avg_price_by_body_style = df.groupby('body-style')['price'].mean().sort_values(ascending=False)
# Display the result
print(avg_price_by_body_style)

#5.Count car types have diffeent number cylinders?
car_type_cylinder_count = df.groupby(['body-style', 'num-of-cylinders']).size().unstack(fill_value=0)
print("\nCount of car types with different number of cylinders:\n", car_type_cylinder_count)

import matplotlib.pyplot as plt
import seaborn as sns

#company&price
# Strip any leading or trailing whitespace characters from column names
df.columns = df.columns.str.strip()
# Convert 'price' to numeric, coercing errors to NaN (if any non-numeric values exist)
df['price'] = pd.to_numeric(df['price'], errors='coerce')
# Drop rows with NaN values in 'price' (if any)
df.dropna(subset=['price'], inplace=True)
# Drop rows with missing values in 'company' (if any)
df.dropna(subset=['company'], inplace=True)
# Calculate average price for each company
avg_price = df.groupby('company')['price'].mean().reset_index()
avg_price = avg_price.sort_values(by='price', ascending=False)  # Sort by average price (optional)
# Plotting
plt.figure(figsize=(12, 8))
plt.bar(avg_price['company'], avg_price['price'], color='skyblue')
plt.xlabel('Company')
plt.ylabel('Average Price')
plt.title('Average Price by Company')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Company & no of cylinders
df = df.dropna(subset=['num-of-cylinders'])
# Plotting
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='num-of-cylinders', palette='viridis', order=df['num-of-cylinders'].value_counts().index)
plt.title('Count of Different Types of Cylinders')
plt.xlabel('Number of Cylinders')
plt.ylabel('Count')
plt.show()

#Body type & price
plt.figure(figsize=(10, 6))
sns.barplot(x=avg_price_by_body_style.index, y=avg_price_by_body_style.values, palette='viridis')
plt.title('Average Price of Cars by Body Type')
plt.xlabel('Body Type')
plt.ylabel('Average Price')
plt.xticks(rotation=45)
plt.show()

#Body type & cylinders
plt.figure(figsize=(12, 6))
df.groupby(['body-style', 'num-of-cylinders']).size().unstack().plot(kind='bar', stacked=True)
plt.title('Count of Cars by Body Type and Number of Cylinders')
plt.xlabel('Body Type')
plt.ylabel('Count')
plt.legend(title='Number of Cylinders')
plt.xticks(rotation=45)
plt.show()

# Engine type & horsepower
plt.figure(figsize=(12, 6))
df.groupby('engine-type')['horsepower'].mean().sort_values(ascending=False).plot(kind='bar')
plt.title('Average Horsepower by Engine Type')
plt.xlabel('Engine Type')
plt.ylabel('Average Horsepower')
plt.xticks(rotation=45)
plt.show()